Parseq
====

## About

Parseq is a monadic parser combinator library written for C#, It can parse context-sensitive, infinite-lookahead grammers.

## Getting Started

- **Install Parseq via NuGet**:

    run the following command in [NuGet](https://www.nuget.org/) Package Manager Console.

        PM> Install-Package Parseq

- **Install Parseq via Binary**:

    you can download from [releases](https://github.com/linerlock/parseq/releases)

- **Install Parseq via Source code**:

        git clone https://github.com/linerlock/parseq.git

    or download snapshot from [zipball](https://github.com/linerlock/parseq/zipball) | [tarball](https://github.com/linerlock/parseq/tarball)

## Target

Parseq provided as PCL (Portable Class Library), it works on the following frameworks:

- .NET Framework 4 (or later)
- .NET for Windows Store apps
- Silverlight 5
- Windows Phone 8

## Example

This is a tiny commnad-line parser example:

        var foo = Option.None<Boolean>();
        var bar = Option.None<String>();

        var commandLineParser = Combinator.Choice(
                /* [--foo | -f] */
                Prims.Satisfy("--foo").Or(Prims.Satisfy("-f"))
                    .DoWhenSuccess(_ => foo = Option.Some(true)),
                /* [--bar <string> | -b <string>] */
                Prims.Satisfy("--bar").Or(Prims.Satisfy("-b"))
                    .Right(Prims.Any<String>())
                    .DoWhenSuccess(_ => bar = Option.Some(_)),
                /* args... */
                Prims.Any<String>())
                .Many(1)
                /* If no arguments are given, show usage */
                .DoWhenFailure(() =>
                    Console.WriteLine("sample [--foo | -f] [--bar <string> | -b <string>] args.."));

## LICENSE

Parseq released under the [MIT License](https://raw.githubusercontent.com/linerlock/parseq/master/LICENSE).

